import sqlite3
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def init_db():
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            race TEXT DEFAULT '0',
            is_race_selected TEXT DEFAULT '‚ùå –Ω–µ—Ç',
            current_action TEXT DEFAULT '0',
            current_position TEXT DEFAULT 'üè∞ –∫–æ–ª–æ–Ω–∏—è'
        )
    ''')
    conn.commit()
    conn.close()

def add_user(user_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT id FROM users WHERE id = ?', (user_id,))
    if cursor.fetchone() is None:
        cursor.execute('INSERT INTO users (id, race) VALUES (?, 0)', (user_id,))
        conn.commit()
        print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω')
    else:
        print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ')
    conn.close()


def set_race(user_id, race):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    try:
        cursor.execute('UPDATE users SET race = ? WHERE id = ?', (race, user_id))
        conn.commit()
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑—É—á–∞–µ—Ç —Ä–∞—Å—Å—É: {get_race(user_id)}")
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ race –¥–ª—è {user_id}: {e}')
    finally:
        conn.close()


def get_race(user_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    try:
        cursor.execute('SELECT race FROM users WHERE id = ?', (user_id,))
        result = cursor.fetchone()
        return result[0] if result else None
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ race –¥–ª—è {user_id}: {e}')
        return None
    finally:
        conn.close()

def set_is_race_selected(user_id, a):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    try:
        cursor.execute('UPDATE users SET is_race_selected = ? WHERE id = ?', (a, user_id))
        conn.commit()
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —Ä–∞—Å—É: {get_race(user_id)}")
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ is_race_selected –¥–ª—è {user_id}: {e}')
    finally:
        conn.close()

def get_is_race_selected(user_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    try:
        cursor.execute('SELECT is_race_selected FROM users WHERE id = ?', (user_id,))
        result = cursor.fetchone()
        return result[0] if result else None
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ is_race_selected –¥–ª—è {user_id}: {e}')
        return None
    finally:
        conn.close()

def set_current_action(user_id, action):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    try:
        cursor.execute('UPDATE users SET current_action = ? WHERE id = ?', (action, user_id))
        conn.commit()
        print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –¥–µ–π—Å—Ç–≤–∏–µ: {action}')
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ current_action –¥–ª—è {user_id}: {e}')
    finally:
        conn.close()

def get_current_action(user_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    try:
        cursor.execute('SELECT current_action FROM users WHERE id = ?', (user_id,))
        result = cursor.fetchone()
        return result[0] if result else None
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ current_action –¥–ª—è {user_id}: {e}')
        return None
    finally:
        conn.close()

def set_current_position(user_id, position):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    try:
        cursor.execute('UPDATE users SET current_position = ? WHERE id = ?', (position, user_id))
        conn.commit()
        print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –≤ {position}')
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ current_position –¥–ª—è {user_id}: {e}')
    finally:
        conn.close()

def get_current_position(user_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    try:
        cursor.execute('SELECT current_position FROM users WHERE id = ?', (user_id,))
        result = cursor.fetchone()
        return result[0] if result else None
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ current_position –¥–ª—è {user_id}: {e}')
        return None
    finally:
        conn.close()