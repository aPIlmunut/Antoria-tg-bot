import logging
import random

from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    FSInputFile,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove
)
from aiogram.filters import Command
from aiogram import F
from aiogram.utils.keyboard import InlineKeyboardBuilder
import asyncio
from aiogram.enums import ChatType
from users_db_operations import (
    init_db,
    add_user,
    set_race, get_race,
    set_is_race_selected, get_is_race_selected,
    set_current_action, get_current_action,
    set_current_position, get_current_position,
    set_question_id, get_question_id,
    set_grain_storage, get_grain_storage,
    set_all_collecting_bonus, get_all_collecting_bonus
)
from text_operations import load_text
from kb_operations import (
    get_main_kb,
    get_start_kb,
    get_start_confirme_kb,
    get_trips_kb, get_actions_kb,
    get_answers_kb
)
from questions_db_operations import init_questions_db, get_random_question_by_subject, get_explanation_and_answer_by_id
from dotenv import load_dotenv
import os


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(".env")
TOKEN = os.getenv("BOT_TOKEN")

if not TOKEN:
    raise ValueError("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")

bot = Bot(token=TOKEN)
dp = Dispatcher()


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    if message.chat.type != ChatType.PRIVATE:
        await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–∫—É.")
        return
    user_id = message.from_user.id
    add_user(user_id)
    if get_is_race_selected(user_id) == "‚ùå –Ω–µ—Ç":

        global welcome_text
        welcome_text = load_text("welcome_text.txt")

        try:
            photo = FSInputFile("pictures/map.png")
            await message.answer_photo(
                photo=photo,
                caption=welcome_text,
                reply_markup=get_start_kb(),
                parse_mode="HTML"
            )
        except FileNotFoundError:
            logger.error("‚ùå –§–∞–π–ª —Å –∫–∞—Ä—Ç–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await message.answer(
                text=welcome_text,
                reply_markup=get_start_kb(),
                parse_mode="HTML"
            )
    else:
        photo_race = {
            "üåæ –ñ–Ω–µ—Ü—ã": "pictures/reaper_photo.jpeg",
            "‚öîÔ∏è –ë—É–ª—å–¥–æ–≥–∏": "pictures/bulldog_photo.jpeg",
            "üçÉ –ª–∏—Å—Ç–æ—Ä–µ–∑—ã": "pictures/leaf_cutter_photo.jpeg"
        }
        action = get_current_action(user_id)
        current_grain, max_grain, grain_str = get_grain_storage(user_id)
        if action == "0": action = "–Ω–µ—Ç"
        caption = f'''
        üëã –ü—Ä–∏–≤–µ—Ç!\n
üêú –†–∞—Å–∞: {get_race(user_id)}
üó∫ –¢–µ–∫—É—â–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ: {get_current_position(user_id)}
üìã –ê–∫—Ç–∏–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}
üì¶ –¢–µ–∫—É—â–∏–µ –∑–∞–ø–∞—Å—ã:
          üåæ –ó–µ—Ä–Ω–æ: {grain_str}
        '''
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
            photo_path = photo_race[get_race(user_id)]
            photo = FSInputFile(photo_path)
            await message.answer_photo(
                photo=photo,
                caption=caption,
                reply_markup=get_main_kb(),
                parse_mode="HTML"
            )

        except FileNotFoundError:
            logger.error(f"–§–∞–π–ª {photo_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
            await message.answer(
                text=caption,
                reply_markup=get_main_kb(),
                parse_mode="HTML"
            )
        if get_question_id(user_id) != 0:
            question_id, subject, question, explanation, answer, wrong1, wrong2 = get_explanation_and_answer_by_id(get_question_id(user_id))
            if get_current_action(user_id) == "üåæ –ø–æ–∏—Å–∫ –∑–µ—Ä–Ω–∞":
                text = f"üåæ –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∑–µ—Ä–Ω–æ:\n\n{question}"
            await message.answer(
                text=text,
                reply_markup=get_answers_kb(answer, wrong1, wrong2),
                parse_mode="HTML"
            )

@dp.callback_query(F.data.startswith("btn"))
async def race_choice(callback: types.CallbackQuery):
    btn_number = callback.data[-1]
    user_id = callback.from_user.id
    r = None
    if get_is_race_selected(user_id) == "‚ùå –Ω–µ—Ç":
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–Ω–æ–ø–∫–∏
        if btn_number == "1":
          text = load_text("reaper_text.txt")
          set_race(user_id,"üåæ –ñ–Ω–µ—Ü—ã")
        elif btn_number == "2":
          text = load_text("bulldog_text.txt")
          set_race(user_id, "‚öîÔ∏è –ë—É–ª—å–¥–æ–≥–∏")
        elif btn_number == "3":
          text = load_text("leaf_cutter_text.txt")
          set_race(user_id, "üçÉ –ª–∏—Å—Ç–æ—Ä–µ–∑—ã")
        elif btn_number == "4":
          text = welcome_text
        else:
            text = "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"

        photo_race = {
          "üåæ –ñ–Ω–µ—Ü—ã": "pictures/reaper_photo.jpeg",
          "‚öîÔ∏è –ë—É–ª—å–¥–æ–≥–∏": "pictures/bulldog_photo.jpeg",
          "üçÉ –ª–∏—Å—Ç–æ—Ä–µ–∑—ã": "pictures/leaf_cutter_photo.jpeg"
        }
        try:
         if btn_number in ["1", "2", "3"]:

            # –î–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—ã - –º–µ–Ω—è–µ–º —Ñ–æ—Ç–æ
            photo_path = photo_race[get_race(user_id)]
            photo = FSInputFile(photo_path)

            # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞ –æ–±—ä–µ–∫—Ç —Å –Ω–æ–≤—ã–º —Ñ–æ—Ç–æ
            media = types.InputMediaPhoto(
                media=photo,
                caption=text,
                parse_mode="HTML"
            )

            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Ñ–æ—Ç–æ
            await callback.message.edit_media(
                media=media,
                reply_markup=get_start_confirme_kb()
            )

         elif btn_number == "4":
            # –î–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç—É
            photo = FSInputFile("pictures/map.png")
            media = types.InputMediaPhoto(
                media=photo,
                caption=text,
                parse_mode="HTML"
            )
            await callback.message.edit_media(
                media=media,
                reply_markup=get_start_kb()
            )
        except FileNotFoundError:
            logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {photo_path}")
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            await callback.message.edit_caption(
               caption=text,
               reply_markup=get_start_kb(),
              parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        if btn_number == "5" and get_race(user_id) != "0":

            set_is_race_selected(user_id,"‚úÖ –¥–∞")

            race_c = {"üåæ –ñ–Ω–µ—Ü—ã": "–ó–µ—Ä–Ω–æ–≥—Ä–∞–¥—Å–∫—É—é –ò–º–ø–µ—Ä–∏—éüåæ",
                      "‚öîÔ∏è –ë—É–ª—å–¥–æ–≥–∏": "–ö–ª–∞–Ω –ö—Ä–æ–≤–∞–≤–æ–≥–æ –ñ–∞–ª–∞‚öîÔ∏è",
                      "üçÉ –ª–∏—Å—Ç–æ—Ä–µ–∑—ã": "–ì—Ä–∏–±–Ω—É—é –ì–µ–≥–µ–º–æ–Ω–∏—é –ê—Ç–ª–∞–ΩüçÉ"}
            r = race_c[get_race(user_id)]
            if r == "–ó–µ—Ä–Ω–æ–≥—Ä–∞–¥—Å–∫—É—é –ò–º–ø–µ—Ä–∏—éüåæ": set_all_collecting_bonus(1)
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
                photo_path = photo_race[get_race(user_id)]
                photo = FSInputFile(photo_path)

                await callback.message.answer_photo(
                    photo=photo,
                    caption=f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–±—Ä–∞–ª–∏ {r}\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–µ–π –∫–æ–ª–æ–Ω–∏–µ–π",
                    reply_markup=get_main_kb(),
                    parse_mode="HTML"
                )

                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ä–∞—Å
                await callback.message.delete()

            except FileNotFoundError:
                logger.error(f"–§–∞–π–ª {photo_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
                await callback.message.answer(
                    text=f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–±—Ä–∞–ª–∏ {r}\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–µ–π –∫–æ–ª–æ–Ω–∏–µ–π",
                    reply_markup=get_main_kb(),
                    parse_mode="HTML"
                )
                await callback.message.delete()

    else:
            await callback.message.delete()
            await callback.answer("‚ö† –í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —Ä–∞—Å—Å—É", show_alert=False)


    await callback.answer()


@dp.message(F.text.in_(["üéí –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "üåê –ö–∞—Ä—Ç–∞", "üìã –¥–µ–π—Å—Ç–≤–∏—è", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]))
async def handle_menu_buttons(message: types.Message):
    user_id = message.from_user.id
    if get_is_race_selected(user_id) == "‚ùå –Ω–µ—Ç" or get_is_race_selected(user_id) == None or get_current_action(user_id) != "0":
        return 0
    if message.text == "üéí –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è":
            await message.answer(
               text=f"üéí –í—ã–±–µ—Ä–∏—Ç–µ –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è",
               reply_markup=get_trips_kb(user_id),
               parse_mode="HTML"
            )

    elif message.text == "üåê –ö–∞—Ä—Ç–∞":
            try:
                photo = FSInputFile("pictures/map.png")
                await message.answer_photo(
                    photo=photo,
                    caption="üåê –ö–∞—Ä—Ç–∞ –º–∏—Ä–∞ Antoria",
                    parse_mode="HTML"
                )
            except Exception as e:
               await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç—É")
               print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã: {e}")

    if message.text == "üìã –¥–µ–π—Å—Ç–≤–∏—è":
        await message.answer(
            text="–¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:",
            reply_markup=get_actions_kb(user_id),
            parse_mode="HTML"
        )

    elif message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        photo_race = {
            "üåæ –ñ–Ω–µ—Ü—ã": "pictures/reaper_photo.jpeg",
            "‚öîÔ∏è –ë—É–ª—å–¥–æ–≥–∏": "pictures/bulldog_photo.jpeg",
            "üçÉ –ª–∏—Å—Ç–æ—Ä–µ–∑—ã": "pictures/leaf_cutter_photo.jpeg"
        }
        action = get_current_action(user_id)
        current_grain, max_grain, grain_str = get_grain_storage(user_id)
        if action == "0": action = "–Ω–µ—Ç"
        caption = f'''
üêú –†–∞—Å–∞: {get_race(user_id)}
üó∫ –¢–µ–∫—É—â–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ: {get_current_position(user_id)}
üìã –ê–∫—Ç–∏–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}
üì¶ –¢–µ–∫—É—â–∏–µ –∑–∞–ø–∞—Å—ã:
          üåæ –ó–µ—Ä–Ω–æ: {grain_str}
       '''
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
            photo_path = photo_race[get_race(user_id)]
            photo = FSInputFile(photo_path)
            await message.answer_photo(
                photo=photo,
                caption=caption,
                reply_markup=get_main_kb(),
                parse_mode="HTML"
            )

        except FileNotFoundError:
            logger.error(f"–§–∞–π–ª {photo_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
            await message.answer(
                text=caption,
                reply_markup=get_main_kb(),
                parse_mode="HTML"
            )

@dp.callback_query(F.data.startswith("travel_"))
async def handle_travel_choice(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    travel_location = callback.data.split("_")[1]

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
    if travel_location == "field":
        set_current_position(user_id, "üåæ –ø–æ–ª–µ")
        new_caption = "–¢—ã –ø—Ä–∏—à–µ–ª –≤ –ø–æ–ª–µ"
        photo_path = "pictures/field_photo.jpg"
    elif travel_location == "colony":
        set_current_position(user_id, "üè∞ –∫–æ–ª–æ–Ω–∏—è")
        new_caption = "–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –≤ –∫–æ–ª–æ–Ω–∏—é"
        photo_race = {
            "üåæ –ñ–Ω–µ—Ü—ã": "pictures/reaper_photo.jpeg",
            "‚öîÔ∏è –ë—É–ª—å–¥–æ–≥–∏": "pictures/bulldog_photo.jpeg",
            "üçÉ –ª–∏—Å—Ç–æ—Ä–µ–∑—ã": "pictures/leaf_cutter_photo.jpeg"
        }
        photo_path = photo_race[get_race(user_id)]
    else:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è")
        return

    try:
        photo = FSInputFile(photo_path)
        media = types.InputMediaPhoto(
            media=photo,
            caption=new_caption,
            parse_mode="HTML"
        )

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ñ–æ—Ç–æ + —Ç–µ–∫—Å—Ç + –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
        await callback.message.edit_media(
            media=media,
        )
    except FileNotFoundError:
        logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {photo_path}")
        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await callback.message.edit_caption(
            caption=new_caption,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        await callback.answer()

@dp.callback_query(F.data.startswith("look_for_"))
async def handle_looking_for(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if get_question_id(user_id) != 0:
        return 0
    looking_for = callback.data.split("_")[2]
    if looking_for == "grain" and get_current_position(user_id) == "üåæ –ø–æ–ª–µ":
        set_current_action(user_id, "üåæ –ø–æ–∏—Å–∫ –∑–µ—Ä–Ω–∞")
        question_id, subject, question, explanation, answer, wrong1, wrong2 = get_random_question_by_subject("üìê –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞")
        set_question_id(user_id, question_id)
        await callback.message.edit_text(
            text=f"üåæ –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∑–µ—Ä–Ω–æ:\n\n{question}",
            reply_markup=get_answers_kb(answer, wrong1, wrong2),
            parse_mode="HTML"
        )


@dp.callback_query(F.data.startswith("answer_"))
async def handle_questions(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if get_question_id(user_id) == 0:
        await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞")
        return

    which_answer = callback.data.split("_")[1]
    question_data = get_explanation_and_answer_by_id(get_question_id(user_id))

    if not question_data:
        await callback.answer("–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    question_id, subject, question, explanation, answer, wrong1, wrong2 = question_data

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    set_question_id(user_id, 0)

    if which_answer == "right":
        await callback.message.edit_text(
            text=f"‚úÖ –í–µ—Ä–Ω–æ!\n\nüí° –ü–æ—è—Å–Ω–µ–Ω–∏–µ:\n{explanation}",
            parse_mode="HTML"
        )
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ‚úÖ –≤–µ—Ä–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å: {question_id}")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_action = get_current_action(user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–∏—Å–∫—É –∑–µ—Ä–Ω–∞
        if current_action == "üåæ –ø–æ–∏—Å–∫ –∑–µ—Ä–Ω–∞":
            bonus = get_all_collecting_bonus(user_id)
            current_grain, max_grain, grain_str = get_grain_storage(user_id)
            amount = random.randint(1, 5) + bonus
            if amount + current_grain > max_grain: set_grain_storage(user_id, max_grain)
            else: set_grain_storage(user_id, amount + current_grain)
            current_grain, max_grain, grain_str = get_grain_storage(user_id)
            try:
                photo = FSInputFile("pictures/grain.jpeg")
                await callback.message.answer_photo(
                    photo=photo,
                    caption=f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –Ω–∞—à–ª–∏ {amount} –µ–¥–∏–Ω–∏—Ü –∑–µ—Ä–Ω–∞! üåæ\nüì¶ –¢–µ–∫—É—â–∏–µ –∑–∞–ø–∞—Å—ã: {grain_str} ‚úÖ",
                    parse_mode="HTML"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
                await callback.message.answer(
                    text=f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –Ω–∞—à–ª–∏ {amount} –µ–¥–∏–Ω–∏—Ü –∑–µ—Ä–Ω–∞! üåæ\nüì¶ –¢–µ–∫—É—â–∏–µ –∑–∞–ø–∞—Å—ã: {grain_str} ‚úÖ",
                    parse_mode="HTML"
                )

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ –Ω–∞–≥—Ä–∞–¥—ã
        set_current_action(user_id, "0")

    elif which_answer == "wrong":
        await callback.message.edit_text(
            text=f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ!\n\nüí° –ü–æ—è—Å–Ω–µ–Ω–∏–µ:\n{explanation}\n\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\n{answer}",
            parse_mode="HTML"
        )
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ‚ùå –Ω–µ–≤–µ—Ä–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å: {question_id}")
        set_current_action(user_id, "0")

    await callback.answer()

async def main():
    init_db()
    init_questions_db()
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())