import sqlite3
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def init_db():
    conn = sqlite3.connect('databases/users.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            race TEXT DEFAULT '0',
            is_race_selected TEXT DEFAULT '‚ùå –Ω–µ—Ç',
            current_action TEXT DEFAULT '0',
            current_position TEXT DEFAULT 'üè∞ –∫–æ–ª–æ–Ω–∏—è',
            question_id INTEGER DEFAULT 0,
            grain_storage TEXT DAFAULT "0/10",
            all_collecting_bonus INTEGER DEFAULT 0
        )
    ''')
    conn.commit()
    conn.close()

def add_user(user_id):
    conn = sqlite3.connect('databases/users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT id FROM users WHERE id = ?', (user_id,))
    if cursor.fetchone() is None:
        cursor.execute('INSERT INTO users (id, race) VALUES (?, 0)', (user_id,))
        conn.commit()
        print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω')
    else:
        print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ')
    conn.close()


def set_race(user_id, race):
    conn = sqlite3.connect('databases/users.db')
    cursor = conn.cursor()
    try:
        cursor.execute('UPDATE users SET race = ? WHERE id = ?', (race, user_id))
        conn.commit()
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑—É—á–∞–µ—Ç —Ä–∞—Å—Å—É: {get_race(user_id)}")
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ race –¥–ª—è {user_id}: {e}')
    finally:
        conn.close()


def get_race(user_id):
    conn = sqlite3.connect('databases/users.db')
    cursor = conn.cursor()
    try:
        cursor.execute('SELECT race FROM users WHERE id = ?', (user_id,))
        result = cursor.fetchone()
        return result[0] if result else None
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ race –¥–ª—è {user_id}: {e}')
        return None
    finally:
        conn.close()

def set_is_race_selected(user_id, a):
    conn = sqlite3.connect('databases/users.db')
    cursor = conn.cursor()
    try:
        cursor.execute('UPDATE users SET is_race_selected = ? WHERE id = ?', (a, user_id))
        conn.commit()
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —Ä–∞—Å—É: {get_race(user_id)}")
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ is_race_selected –¥–ª—è {user_id}: {e}')
    finally:
        conn.close()

def get_is_race_selected(user_id):
    conn = sqlite3.connect('databases/users.db')
    cursor = conn.cursor()
    try:
        cursor.execute('SELECT is_race_selected FROM users WHERE id = ?', (user_id,))
        result = cursor.fetchone()
        return result[0] if result else None
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ is_race_selected –¥–ª—è {user_id}: {e}')
        return None
    finally:
        conn.close()

def set_current_action(user_id, action):
    conn = sqlite3.connect('databases/users.db')
    cursor = conn.cursor()
    try:
        cursor.execute('UPDATE users SET current_action = ? WHERE id = ?', (action, user_id))
        conn.commit()
        if action != "0":
            print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –¥–µ–π—Å—Ç–≤–∏–µ: {action}')
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ current_action –¥–ª—è {user_id}: {e}')
    finally:
        conn.close()

def get_current_action(user_id):
    conn = sqlite3.connect('databases/users.db')
    cursor = conn.cursor()
    try:
        cursor.execute('SELECT current_action FROM users WHERE id = ?', (user_id,))
        result = cursor.fetchone()
        return result[0] if result else None
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ current_action –¥–ª—è {user_id}: {e}')
        return None
    finally:
        conn.close()

def set_current_position(user_id, position):
    conn = sqlite3.connect('databases/users.db')
    cursor = conn.cursor()
    try:
        cursor.execute('UPDATE users SET current_position = ? WHERE id = ?', (position, user_id))
        conn.commit()
        print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –≤ {position}')
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ current_position –¥–ª—è {user_id}: {e}')
    finally:
        conn.close()

def get_current_position(user_id):
    conn = sqlite3.connect('databases/users.db')
    cursor = conn.cursor()
    try:
        cursor.execute('SELECT current_position FROM users WHERE id = ?', (user_id,))
        result = cursor.fetchone()
        return result[0] if result else None
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ current_position –¥–ª—è {user_id}: {e}')
        return None
    finally:
        conn.close()

def set_question_id(user_id, question_id):
    conn = sqlite3.connect('databases/users.db')
    cursor = conn.cursor()
    try:
        cursor.execute('UPDATE users SET question_id = ? WHERE id = ?', (question_id, user_id))
        conn.commit()
        if question_id != 0:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: {question_id}")
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ question_id –¥–ª—è {user_id}: {e}')
    finally:
        conn.close()

def get_question_id(user_id):
    conn = sqlite3.connect('databases/users.db')
    cursor = conn.cursor()
    try:
        cursor.execute('SELECT question_id FROM users WHERE id = ?', (user_id,))
        result = cursor.fetchone()
        return result[0] if result else None
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ question_id –¥–ª—è {user_id}: {e}')
        return None
    finally:
        conn.close()


def set_grain_storage(user_id, current_amount=None, max_capacity=None):
    conn = sqlite3.connect('databases/users.db')
    cursor = conn.cursor()
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        cursor.execute('SELECT grain_storage FROM users WHERE id = ?', (user_id,))
        result = cursor.fetchone()

        # –ü–∞—Ä—Å–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if result and result[0]:
            existing_current, existing_max = map(int, result[0].split('/'))
        else:
            existing_current, existing_max = 0, 10  # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        new_current = existing_current if current_amount is None else current_amount
        new_max = existing_max if max_capacity is None else max_capacity

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–ª–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ
        if new_current > new_max:
            new_current = new_max

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        storage_str = f"{new_current}/{new_max}"

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–∞–∑–µ
        cursor.execute('UPDATE users SET grain_storage = ? WHERE id = ?', (storage_str, user_id))
        conn.commit()
        logger.info(f"–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {storage_str}")
        return storage_str

    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ grain_storage –¥–ª—è {user_id}: {e}')
        return None
    finally:
        conn.close()


def get_grain_storage(user_id):
    conn = sqlite3.connect('databases/users.db')
    cursor = conn.cursor()
    try:
        cursor.execute('SELECT grain_storage FROM users WHERE id = ?', (user_id,))
        result = cursor.fetchone()

        if result and result[0]:
            current, max_capacity = map(int, result[0].split('/'))
            return current, max_capacity, result[0]
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (0/10)
            return 0, 10, "0/10"

    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ grain_storage –¥–ª—è {user_id}: {e}')
        return 0, 10, "0/10"  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
    finally:
        conn.close()

def set_all_collecting_bonus(user_id, bonus):
    conn = sqlite3.connect('databases/users.db')
    cursor = conn.cursor()
    try:
        cursor.execute('UPDATE users SET all_collecting_bonus = ? WHERE id = ?', (bonus, user_id))
        conn.commit()
        print(f"–ë–æ–Ω—É—Å –¥–ª—è —Å–±–æ—Ä–∞ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ —É {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {bonus}")
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ all_collecting_bonus –¥–ª—è {user_id}: {e}')
    finally:
        conn.close()

def get_all_collecting_bonus(user_id):
    conn = sqlite3.connect('databases/users.db')
    cursor = conn.cursor()
    try:
        cursor.execute('SELECT all_collecting_bonus FROM users WHERE id = ?', (user_id,))
        result = cursor.fetchone()
        return result[0] if result else None
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ all_collecting_bonus –¥–ª—è {user_id}: {e}')
        return None
    finally:
        conn.close()